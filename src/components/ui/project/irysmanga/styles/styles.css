:root {
    --header-height: 64px;
    --sidebar-width: 300px;
}

.barIcon {
    @apply transition-opacity duration-100 ease-linear opacity-60 cursor-pointer hover:opacity-100;
}

.kbdalt {
    @apply bg-skin-primary dark:bg-skin-primary-dark text-skin-primary-foreground dark:text-skin-primary-foreground-dark rounded-md px-2 py-0.5 text-sm;
}

.setting-icon {
    @apply w-[20px] text-nowrap;
}

body {
    scrollbar-width: thin;
}

::-webkit-scrollbar {
    width: 4px;
    height: 4px;
}

::-webkit-scrollbar-track {
    background: oklch(var(--b2));
}

::-webkit-scrollbar-thumb {
    background: oklch(var(--bc));
    opacity: 0;
}

::-webkit-scrollbar-thumb:hover {
    background: oklch(var(--bc));
}

/* Classes below based on DaisyUI */
/*
MIT License

Copyright (c) 2020 Pouya Saadeghi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */

.button {
    @apply rounded-md bg-skin-secondary dark:bg-skin-secondary-dark text-skin-secondary-foreground dark:text-skin-secondary-foreground-dark p-4 h-12 min-h-12 text-sm leading-4 gap-2 font-semibold transition-all items-center hover:bg-[color-mix(in_srgb,rgb(var(--color-secondary))_90%,black)] dark:hover:bg-[color-mix(in_srgb,rgb(var(--color-secondary-dark))_90%,black)] flex whitespace-nowrap disabled:cursor-not-allowed disabled:bg-[color-mix(in_srgb,rgb(var(--color-secondary))_90%,black)];
}

.modal {
    @apply bg-transparent text-[inherit] duration-200 ease-out;
    transition-property: transform, opacity, visibility;
    overflow-y: hidden;
    overscroll-behavior: contain;
    &:not(dialog:not(.modal-open)),
    &::backdrop {
        background-color: #0006;
        animation: modal-pop 0.2s ease-out;
    }
}
.modal-backdrop {
    @apply -z-[1] col-start-1 row-start-1 grid self-stretch justify-self-stretch text-transparent;
}
.modal-box {
    @apply bg-skin-secondary dark:bg-skin-secondary-dark text-skin-secondary-foreground dark:text-skin-header-foreground-dark rounded-b-box rounded-t-box col-start-1 row-start-1 w-11/12 max-w-lg scale-90 transform p-6 transition duration-200 ease-out;
    box-shadow: rgba(0, 0, 0, 0.25) 0px 25px 50px -12px;
    overflow-y: auto;
    overscroll-behavior: contain;
}
.modal-open .modal-box,
.modal-toggle:checked + .modal .modal-box,
.modal:target .modal-box,
.modal[open] .modal-box {
    @apply translate-y-0 scale-100;
}
.modal-action {
    @apply mt-6 justify-end space-x-2;
}
@keyframes modal-pop {
    0% {
        opacity: 0;
    }
}

.tabs-lifted > .tab:focus-visible {
    border-end-end-radius: 0;
    border-end-start-radius: 0;
}
.tab {
    @apply text-opacity-50 [@media(hover:hover)]:hover:text-opacity-100;
    --tab-color: rgb(var(--color-primary-foreground));
    --tab-bg: rgb(var(--color-primary));
    --tab-border-color: rgb(var(--color-primary));

    .dark {
        --tab-color: rgb(var(--color-primary-foreground-dark));
        --tab-bg: rgb(var(--color-primary-dark));
        --tab-border-color: rgb(var(--color-primary-dark));
    }

    color: var(--tab-color);
    padding-inline-start: var(--tab-padding, 1rem);
    padding-inline-end: var(--tab-padding, 1rem);
    &:is(.tab-active, [aria-selected="true"]):not(.tab-disabled):not([disabled]),
    &:is(input:checked) {
        @apply border-opacity-100 text-opacity-100;
    }
    &:focus {
        @apply outline-none;
    }
    &:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: -5px;
    }
    /* disabled */
    &-disabled,
    &[disabled] {
        @apply cursor-not-allowed text-opacity-20;
    }
    @media (hover: hover) {
        &[disabled],
        &[disabled]:hover {
            @apply cursor-not-allowed text-opacity-20;
        }
    }
}
.tabs-bordered > .tab {
    @apply border-base-content border-opacity-20;
    border-style: solid;
    border-bottom-width: calc(var(--tab-border, 1px) + 1px);
}
.tabs-lifted > .tab {
    @apply bg-skin-background dark:bg-skin-background-dark text-skin-text dark:text-skin-text-dark;
    border: var(--tab-border, 1px) solid transparent;
    border-width: 0 0 var(--tab-border, 1px) 0;
    border-start-start-radius: var(--tab-radius, 0.5rem);
    border-start-end-radius: var(--tab-radius, 0.5rem);
    border-bottom-color: var(--tab-border-color);
    padding-inline-start: var(--tab-padding, 1rem);
    padding-inline-end: var(--tab-padding, 1rem);
    padding-top: var(--tab-border, 1px);
    &:is(.tab-active, [aria-selected="true"]):not(.tab-disabled):not([disabled]),
    &:is(input:checked) {
        background-color: var(--tab-bg);
        color: var(--tab-color);
        border-width: var(--tab-border, 1px) var(--tab-border, 1px) 0 var(--tab-border, 1px);
        border-inline-start-color: var(--tab-border-color);
        border-inline-end-color: var(--tab-border-color);
        border-top-color: var(--tab-border-color);
        padding-inline-start: calc(var(--tab-padding, 1rem) - var(--tab-border, 1px));
        padding-inline-end: calc(var(--tab-padding, 1rem) - var(--tab-border, 1px));
        padding-bottom: var(--tab-border, 1px);
        padding-top: 0;
        &:before {
            z-index: 1;
            content: "";
            display: block;
            position: absolute;
            width: calc(100% + var(--tab-radius, 0.5rem) * 2);
            height: var(--tab-radius, 0.5rem);
            bottom: 0;
            background-size: var(--tab-radius, 0.5rem);
            background-position:
                    top left,
                    top right;
            background-repeat: no-repeat;
            --tab-grad: calc(69% - var(--tab-border, 1px));
            --radius-start: radial-gradient(
                    circle at top left,
                    transparent var(--tab-grad),
                    var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
                    var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),
                    var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.25px)
            );
            --radius-end: radial-gradient(
                    circle at top right,
                    transparent var(--tab-grad),
                    var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
                    var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),
                    var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.25px)
            );
            background-image: var(--radius-start), var(--radius-end);
        }

        &:first-child:before {
            background-image: var(--radius-end);
            background-position: top right;
            [dir="rtl"] & {
                background-image: var(--radius-start);
                background-position: top left;
            }
        }
        &:last-child:before {
            background-image: var(--radius-start);
            background-position: top left;
            [dir="rtl"] & {
                background-image: var(--radius-end);
                background-position: top right;
            }
        }
    }
}
.tabs-lifted
> :is(.tab-active, [aria-selected="true"]):not(.tab-disabled):not([disabled])
+ .tabs-lifted
:is(.tab-active, [aria-selected="true"]):not(.tab-disabled):not([disabled]),
.tabs-lifted > .tab:is(input:checked) + .tabs-lifted .tab:is(input:checked) {
    &:before {
        background-image: var(--radius-end);
        background-position: top right;
    }
}
